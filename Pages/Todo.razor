@page "/todo"

<h3>Add Task</h3>
<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="What to do?"
        @bind="newTodo" aria-label="New Todo task" @onkeyup="@Enter">

    <!--<select class="form-select" aria-label="Example select with button addon">
        <option selected>Choose When...</option>
        <option value="1">Today</option>
        <option value="2">Tomorrow</option>
        <option value="3">This Week</option>
        <option value="4">This Month</option>
        <option value="5">This Year</option>
        <option value="6">Someday</option>
    </select>-->

    <button class="btn btn-outline-primary" type="button" @onclick="AddTodo">
        <i class="fa-solid fa-circle-plus fa-2x"></i>
    </button>
</div>

<h3>@Heading
    <span class="badge bg-primary rounded-pill">
        @todoItems.Count(x => x.IsDone== true)/@todoItems.Count
    </span>
</h3>
<ul class="list-group" ondragover="event.preventDefault();">
    @foreach (var todo in todoItems)
    {
        <div class="input-group mb-3" draggable="true" @key="@todo"
        @ondragleave="@(()=> {todo.IsDragOver = false;})"
        @ondragenter="@(()=>{todo.IsDragOver = true;})"
        style="@(todo.IsDragOver?"border: 2px dotted red":"")"
        @ondrop="@(()=> HandleDrop(todo))"
        @ondragstart="@(()=> HandleStartDrag(todo))">
            <button type="button" class="btn btn btn-outline-secondary"
            id="basic-addon1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                fill="currentColor" class="bi bi-grip-vertical"
                viewBox="0 0 16 16">
                    <path
                    d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z">
                    </path>
                </svg>
            </button>
            <div class="input-group-text">
                <input class="form-check-input mt-0 btn-outline-secondary"
                type="checkbox" @bind="todo.IsDone"
                aria-label="Checkbox for following Todo task">
            </div>
            @if (todo.IsDone)
            {
                <input type="text" class="form-control text-decoration-line-through"
            @bind="todo.Title" aria-label="Todo task with a checkbox" disabled>
            }
            else
            {
                <input type="text" class="form-control" @bind="todo.Title"
            aria-label="Todo task with a checkbox">
            }
            <button class="btn btn-outline-danger" type="button"
            @onclick="@(() => todoItems.Remove(todo))">
                <i class="fa-solid fa-trash-can"></i>
            </button>
        </div>
    }
</ul>


@code {
    private List<TodoItem> todoItems = new();
    private string? newTodo;
    [Parameter]
    public string? Heading { get; set; } = "All Tasks";

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todoItems.Add(new TodoItem { Title = newTodo });
            newTodo = string.Empty;
        }
    }
    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddTodo();
        }
    }

    int currentIndex;
    private void HandleDrop(TodoItem item)
    {
        if (item != null)
        {
            int index = todoItems.FindIndex(a => a.Title == item.Title);
            // get current item
            var current = todoItems[currentIndex];
            // remove game from current index
            todoItems.RemoveAt(currentIndex);
            todoItems.Insert(index, current);
            // update current selection
            currentIndex = index;
            item.IsDragOver = false;
            StateHasChanged();
        }
    }
    private void HandleStartDrag(TodoItem item)
    {
        currentIndex = todoItems.FindIndex(a => a.Title == item.Title);

    }
}